name: CI/CD Pipeline - API Gateway

on:
  push:
    branches:
      - main
      - develop
      - staging
  pull_request:
    branches:
      - main
      - staging
      - develop

env:
  GO_VERSION: "1.23"
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/api-gateway

jobs:
  # ============================================================
  # TEST JOB - Runs on all branches
  # ============================================================
  test:
    name: Test & Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: 'go'

      - name: Run tests
        run: go test -v -race -coverprofile=coverage.out ./...

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage.out
          flags: unittests

      - name: Run linting
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          args: --timeout=5m

      - name: Build binary
        run: go build -v -o bin/api-server ./cmd/server/

  # ============================================================
  # BUILD JOB - Runs on pushed commits
  # ============================================================
  build:
    name: Build & Push Docker Image
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    permissions:
      contents: read
      packages: write
    outputs:
      image: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=sha,prefix={{branch}}-

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ============================================================
  # DEPLOY TO DEV
  # ============================================================
  deploy-dev:
    name: Deploy to Dev
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Dev
        env:
          AWS_REGION: us-east-1
          ENVIRONMENT: dev
          CLUSTER_NAME: api-gateway-dev
          SERVICE_NAME: api-gateway
        run: |
          echo "Deploying API Gateway to Dev..."
          echo "Service deployed successfully"

  # ============================================================
  # DEPLOY TO STAGING
  # ============================================================
  deploy-staging:
    name: Deploy to Staging
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/staging' && github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Staging Tests
        run: |
          go test -v -tags=staging ./...

      - name: Deploy to Staging
        env:
          AWS_REGION: us-east-1
          ENVIRONMENT: staging
          CLUSTER_NAME: api-gateway-staging
          SERVICE_NAME: api-gateway
        run: |
          echo "Deploying API Gateway to Staging..."
          echo "Service deployed successfully"

  # ============================================================
  # DEPLOY TO PRODUCTION
  # ============================================================
  deploy-prod:
    name: Deploy to Production
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Verify Production Readiness
        run: |
          test -f bin/api-server || (echo "Binary not found" && exit 1)

      - name: Deploy to Production
        env:
          AWS_REGION: us-east-1
          ENVIRONMENT: prod
          CLUSTER_NAME: api-gateway-prod
          SERVICE_NAME: api-gateway
        run: |
          echo "Deploying API Gateway to Production..."
          echo "Service deployed successfully"

      - name: Production Health Check
        run: |
          echo "Running production health checks..."
